---
- name: Create docker service systemd directory if it doesn't exist
  file:
    path: /etc/systemd/system/docker.service.d
    state: directory

- name: Write docker proxy drop-in
  template:
    src: http-proxy.conf.j2
    dest: /etc/systemd/system/docker.service.d/http-proxy.conf
  notify: restart docker
  when: http_proxy is defined or https_proxy is defined

- name: get systemd version  # noqa 306
  # noqa 303 - systemctl is called intentionally here
  shell: systemctl --version | head -n 1 | cut -d " " -f 2
  register: systemd_version
  when: not is_ostree
  changed_when: false
  check_mode: false

- name: Write sysbox-fs.service systemd file
  copy:
    src: sysbox-fs.service
    dest: /etc/systemd/system/sysbox-fs.service
    mode: 0755
  when: (ansible_facts['distribution'] in ["Ubuntu"])

- name: Write sysbox-mgr.service systemd file
  copy:
    src: sysbox-mgr.service
    dest: /etc/systemd/system/sysbox-mgr.service
    mode: 0755
  when: (ansible_facts['distribution'] in ["Ubuntu"])

- name: Increase default inotify resources to meet sys container's demands.
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    sysctl_set: yes
    state: present
    sysctl_file: "{{ sysctl_file_path }}"
    reload: yes
  with_items:
    - name: fs.inotify.max_queued_events
      value: 1048576
    - name: fs.inotify.max_user_watches
      value: 1048576
    - name: fs.inotify.max_user_instances
      value: 1048576
  when: (ansible_facts['distribution'] in ["Ubuntu"])

- name: Increase default keyring resources to meet sys container demands.
  sysctl:
    name: "kernel.keys.maxkeys"
    value: "20000" # For a k8s cluster: keys = 35 + (workers * 23) + (2 * pods)
    state: present
    sysctl_file: "{{ sysctl_file_path }}"
    reload: yes
  when: (ansible_facts['distribution'] in ["Ubuntu"])

- name: Write docker daemon config
  copy:
    src: docker-daemon.json
    dest: /etc/docker/daemon.json
    mode: 0755
  notify: restart docker
  when: (ansible_facts['distribution'] in ["Ubuntu"])

- name: Write docker.service systemd file
  template:
    src: docker.service.j2
    dest: /etc/systemd/system/docker.service
  register: docker_service_file
  notify: restart docker
  when: not (ansible_os_family in ["CoreOS", "Coreos", "Container Linux by CoreOS", "Flatcar", "Flatcar Container Linux by Kinvolk"] or is_ostree)

- name: Write docker options systemd drop-in
  template:
    src: docker-options.conf.j2
    dest: "/etc/systemd/system/docker.service.d/docker-options.conf"
  notify: restart docker

- name: Write docker dns systemd drop-in
  template:
    src: docker-dns.conf.j2
    dest: "/etc/systemd/system/docker.service.d/docker-dns.conf"
  notify: restart docker
  when: dns_mode != 'none' and resolvconf_mode == 'docker_dns'

- name: Copy docker orphan clean up script to the node
  copy:
    src: cleanup-docker-orphans.sh
    dest: "{{ bin_dir }}/cleanup-docker-orphans.sh"
    mode: 0755
  when: docker_orphan_clean_up | bool

- name: Write docker orphan clean up systemd drop-in
  template:
    src: docker-orphan-cleanup.conf.j2
    dest: "/etc/systemd/system/docker.service.d/docker-orphan-cleanup.conf"
  notify: restart docker
  when: docker_orphan_clean_up | bool

- meta: flush_handlers
